//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "token_meta")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub token_id: String,
	pub name: String,
	pub symbol: String,
	pub issue_chain: String,
	pub decimals: i16,
	#[sea_orm(column_type = "Text", nullable)]
	pub icon: Option<String>,
	pub metadata: Json,
	pub dst_chains: Json,
	pub launch_pad: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::launch_pad::Entity",
		from = "Column::LaunchPad",
		to = "super::launch_pad::Column::LaunchPad",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	LaunchPad,
	#[sea_orm(has_many = "super::token_ledger_id_on_chain::Entity")]
	TokenLedgerIdOnChain,
	#[sea_orm(has_many = "super::token_on_chain::Entity")]
	TokenOnChain,
	#[sea_orm(has_one = "super::token_volume::Entity")]
	TokenVolume,
}

impl Related<super::launch_pad::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::LaunchPad.def()
	}
}

impl Related<super::token_ledger_id_on_chain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TokenLedgerIdOnChain.def()
	}
}

impl Related<super::token_on_chain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TokenOnChain.def()
	}
}

impl Related<super::token_volume::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TokenVolume.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
