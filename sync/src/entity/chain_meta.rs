//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::ChainState;
use super::sea_orm_active_enums::ChainType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "chain_meta")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub chain_id: String,
	#[sea_orm(column_type = "Text")]
	pub canister_id: String,
	pub chain_type: ChainType,
	pub chain_state: ChainState,
	pub contract_address: Option<String>,
	pub counterparties: Option<Json>,
	pub fee_token: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::token_ledger_id_on_chain::Entity")]
	TokenLedgerIdOnChain,
	#[sea_orm(has_many = "super::token_on_chain::Entity")]
	TokenOnChain,
}

impl Related<super::token_ledger_id_on_chain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TokenLedgerIdOnChain.def()
	}
}

impl Related<super::token_on_chain::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::TokenOnChain.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
